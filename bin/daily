#! /bin/sh
":" //# comment; exec /app/.heroku/node/bin/node --noharmony "$0" "$@"
// Heroku
// /bin/sh
// MAC
// /usr/local/bin/node
// PC
// /usr/bin/node
require('dotenv').config();

var convert = require('ebook-convert');


const exec = require('child_process').exec
var fs = require('fs');
const dropboxV2Api = require('dropbox-v2-api');

// create session ref:
const dropbox = dropboxV2Api.authenticate({
    token: process.env.dropbox_auth
});

fs.writeFile(".rmapi", "devicetoken: " + process.env.devicetoken + "\n" +
    "usertoken: " + process.env.usertoken, function(err) {

    if(err) {
        return console.log(err);
    }

    console.log("Saved config file");
});

function os_func() {

        this.execCommand = function(pub, cmd, callback) {
            exec(cmd, (error, stdout, stderr) => {
                if (error) {
                console.error(`exec error: ${error}`);
                console.log("Retrying...")
                daily(pub);
                return;
                 }
        callback(stdout);
        });
    }
}
var os = new os_func();

//Publications

//WSJ
const WSJ_file = "_wsj_";
const WSJ_recipe = "The Wall Street Journal.recipe";

//Seattle Times
const seattle_times_file = "_seattle-times_";
const seattle_times_recipe = "The Seattle Times.recipe";

//NYT
const nytimes_file = "_nytimes_";
const nytimes_recipe = "nytimes.recipe";

//Reddit
const reddit_file = "_reddit_"
const reddit_recipe = "reddit.recipe"

//New Yorker
const new_yorker_file = "_newyorker_"
const new_yorker_recipe = "New Yorker Magazine.recipe"

//The Economist
const economist_file = "_economist_"
const economist_recipe = "The Economist.recipe"

//Wired
const wired_file = "_wired_"
const wired_recipe = "wired.recipe"

//Atlantic
const atlantic_file = "_atlantic_"
const atlantic_recipe = "atlantic.recipe"

function get_file(pub){
    if(pub === "WSJ") return WSJ_file;
    if(pub === "ST") return seattle_times_file;
    if(pub === "RD") return reddit_file;
    if(pub === "NYT") return nytimes_file;
    if(pub === "NYR") return new_yorker_file;
    if(pub === "EC") return economist_file;
    if(pub === "WR") return wired_file;
    if(pub === "AL") return atlantic_file;
}

function get_recipe(pub){
    if(pub === "WSJ") return WSJ_recipe;
    if(pub === "ST") return seattle_times_recipe;
    if(pub === "RD") return reddit_recipe;
    if(pub === "NYT") return nytimes_recipe;
    if(pub === "NYR") return new_yorker_recipe;
    if(pub === "EC") return economist_recipe;
    if(pub === "WR") return wired_recipe;
    if(pub === "AL") return atlantic_recipe;
}

function get_username(pub){
    if(pub === "WSJ") return `${process.env.wsj_username}`;
    if(pub === "NYT") return `${process.env.nyt_username}`;
    else return "";
}

function get_password(pub){
    if(pub === "WSJ") return `${process.env.wsj_password}`;
    if(pub === "NYT") return `${process.env.nyt_password}`;
    else return "";
} 

function download_pub(pub, filetype, output_profile, callback){
    var options = {
        input: `"${get_recipe(pub)}"`,
        output: `"./pdfs/${get_file(pub)}.${filetype}"`,
        username: `"${get_username(pub)}"`,
        password: `"${get_password(pub)}"`,
        "output-profile": `"${output_profile}"`,
      }

        convert(options, function (err) {
            if (err) console.log(err)
          else{
            //   console.log(`ebook-convert successful ./pdfs/${get_file(pub)}.${filetype}`)
                callback(`./pdfs/${get_file(pub)}.${filetype}`);
                }
        })


        // const command = `ebook-convert "${get_recipe(pub)}" ./pdfs/${get_file(pub)}.${filetype} -vv --output-profile ${output_profile} --username ${get_username(pub)} --password ${get_password(pub)}`;
        // console.log(command);
    
        // os.execCommand(pub, command, function (returnvalue) {
        //         if(returnvalue.includes(`exec error`)){
        //             console.log(`Initial ${pub} pub download failed, trying again`);
        //             download_pub(pub);
        //         }
        //         else{
        //             callback(`./pdfs/${get_file(pub)}.${filetype}`);
        //         }
        //  });
}

function daily(pub) {

    const filetype = "epub";
    const output_profile = "kobo";

    //Generate rM pub
    download_pub(pub, filetype, output_profile, function(pub_filename){
    console.log(`Generated rM ${pub} pub`);
    //Send to dbx
        dropbox({
            resource: 'files/upload',
            parameters: {
            path: process.env.dropbox_path + `${get_file(pub)}.${filetype}` ,
            mode: 'overwrite',
            },
            readStream: fs.createReadStream(pub_filename)}, (err, result, response) => {
                //upload completed
                console.log(`Uploaded ${pub} to dbx`);
            });


        //Remove old edition, then send to rM
        os.execCommand(pub, `./rmapi find .`, function (returnvalue) {
            if (returnvalue.includes(`${get_file(pub)}`)){

                //Remove old edition
                os.execCommand(pub, `./rmapi rm ${get_file(pub)}`, function (returnvalue) {
                    console.log(`Removed old ${pub} edition`);

                         //Send to rM
                         os.execCommand(pub, `./rmapi put ${pub_filename}`, function (returnvalue) {
                             console.log(`Sent ${pub} pub to rM`);
                         });
                    });

             }

             //Send to rM
             else{
                 os.execCommand(pub, `./rmapi put ${pub_filename}`, function (returnvalue) {
                     console.log(`Sent ${pub} pub to rM`);
                 });
             }
        });
    });

    // //Generate kindle pub
    // download_pub(pub, "mobi", "kindle_pw3", function(pub_filename){
    //         //Email mobi to Kindle
    //          os.execCommand(pub,`calibre-smtp --attachment ./pdfs/${get_file(pub)}.mobi --relay mail.gmx.com --port 587 --username ${process.env.EMAIL_USER} --password ${process.env.EMAIL_PASSWORD} ${process.env.EMAIL_USER} ${process.env.KINDLE_EMAIL} ""`, function (returnvalue) {
    //         console.log(`Emailed ${pub} mobi to Kindle`);
    //         });
    // });
}
if (process.argv.length > 2){
  process.argv.slice(2, process.argv.length).forEach(function(currentValue){
    daily(currentValue.toUpperCase());
  });
}
else{
  daily("WSJ");
  daily("ST");
  daily("RD");
  daily("NYT");
  daily("NYR");
  daily("EC");
  daily("WR");
  daily("AL");
}
