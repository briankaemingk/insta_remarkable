#! /bin/sh
":" //# comment; exec /app/.heroku/node/bin/node --noharmony "$0" "$@"
// Heroku
// 
// MAC
// /usr/local/bin/node
// PC
// /usr/bin/node
require('dotenv').config();
const exec = require('child_process').exec
var fs = require('fs');

fs.writeFile(".rmapi", "devicetoken: " + process.env.devicetoken + "\n" +
    "usertoken: " + process.env.usertoken, function(err) {

    if(err) {
        return console.log(err);
    }

    console.log("Saved config file");
});

function os_func() {


        this.execCommand = function(pub, cmd, callback) {
            exec(cmd, (error, stdout, stderr) => {
                if (error) {
                console.error(`exec error: ${error}`);
                console.log("Retrying...")
                daily(pub);
                return;
                 }
        callback(stdout);
        });
    }
}
var os = new os_func();

//Publications

//WSJ
const WSJ_file = "_wsj_";
const WSJ_recipe = "The Wall Street Journal.recipe";

//Seattle Times
const seattle_times_file = "_seattle-times_";
const seattle_times_recipe = "The Seattle Times.recipe";

//NYT
const nytimes_file = "_nytimes_";
const nytimes_recipe = "The New York Times.recipe";

//Reddit
const reddit_file = "_reddit_"
const reddit_recipe = "reddit.recipe"

//New Yorker
const new_yorker_file = "_newyorker_"
const new_yorker_recipe = "New Yorker Magazine.recipe"

function get_file(pub){
    if(pub === "WSJ") return WSJ_file;
    if(pub === "ST") return seattle_times_file;
    if(pub === "RD") return reddit_file;
    if(pub === "NYT") return nytimes_file;
    if(pub === "NYR") return new_yorker_file;
}

function get_recipe(pub){
    if(pub === "WSJ") return WSJ_recipe;
    if(pub === "ST") return seattle_times_recipe;
    if(pub === "RD") return reddit_recipe;
    if(pub === "NYT") return nytimes_recipe;
    if(pub === "NYR") return new_yorker_recipe;
}

function get_username(pub){
    if(pub === "WSJ") return `${process.env.wsj_username}`;
    if(pub === "ST") return "";
    if(pub === "RD") return "";
    if(pub === "NYT") return `${process.env.nyt_username}`;
    if(pub === "NYR") return "";
}

function get_password(pub){
    if(pub === "WSJ") return `${process.env.wsj_password}`;
    if(pub === "ST") return "";
    if(pub === "RD") return "";
    if(pub === "NYT") return `${process.env.nyt_password}`;
    if(pub === "NYR") return "";
}

function download_pub(pub, filetype, output_profile, callback){
        os.execCommand(pub, `ebook-convert "${get_recipe(pub)}" ./pdfs/${get_file(pub)}.${filetype}  --output-profile ${output_profile} --username ${get_username(pub)} --password ${get_password(pub)}`, function (returnvalue) {
                if(returnvalue.includes(`exec error`)){
                    console.log(`Initial ${pub} pub download failed, trying again`);
                    download_pub(pub);
                }
                else{
                    callback(`./pdfs/${get_file(pub)}.${filetype}`);
                }
        });
}

function daily(pub) {

    //Generate rM pub
    download_pub(pub, "epub", "kobo", function(pub_filename){
    console.log(`Generated rM ${pub} pub`);

        //Remove old edition, then send to rM
        os.execCommand(pub, `./rmapi find .`, function (returnvalue) {
            if (returnvalue.includes(`${get_file(pub)}`)){

                //Remove old edition
                os.execCommand(pub, `./rmapi rm ${get_file(pub)}`, function (returnvalue) {
                    console.log(`Removed old ${pub} edition`);
                        //Send to dbx

                         //Send to rM
                         os.execCommand(pub, `./rmapi put ${pub_filename}`, function (returnvalue) {
                             console.log(`Sent ${pub} pub to rM`);
                         });
                 });
             }

             //Send to rM
             else{
                 os.execCommand(pub, `./rmapi put ${pub_filename}`, function (returnvalue) {
                     console.log(`Sent ${pub} pub to rM`);
                 });
             }
        });
    });

    //Generate kindle pub
    download_pub(pub, "mobi", "kindle_pw3", function(pub_filename){
            //Email mobi to Kindle
             os.execCommand(pub,`calibre-smtp --attachment ./pdfs/${get_file(pub)}.mobi --relay mail.gmx.com --port 587 --username ${process.env.EMAIL_USER} --password ${process.env.EMAIL_PASSWORD} ${process.env.EMAIL_USER} ${process.env.KINDLE_EMAIL} ""`, function (returnvalue) {
            console.log(`Emailed ${pub} mobi to Kindle`);
            });
    });
}
if (process.argv.length > 2){
  process.argv.slice(2, process.argv.length).forEach(function(currentValue){
    daily(currentValue.toUpperCase());
  });
}
else{
  daily("WSJ");
  daily("ST");
  daily("RD");
  daily("NYT");
  daily("NYR");
}
